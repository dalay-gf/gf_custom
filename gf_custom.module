<?php


// Имя поля ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_FIELD', 'ucxf_own_transport_company');
// HTML-элемент поля выбора ТК, при выборе которого будет видимым поле
// ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_VISIBLE_JQ_ELEMENT', '#edit-panes-delivery-address-delivery-ucxf-cargo-company');
// Имя элемента списка выбора ТК, при выборе которого будет видимым поле
// ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_VISIBLE_VAL', 'own_cargo');

// Заголовки для страниц, объединяющих несколько терминов таксономии
// и сформированных через Views.
define('GF_CUSTOM_VIEWS_PAGE_TITLE', [
  '2756,2764'=> 'Bags', // Сумки (муж., женские...)
  '2769,2771,2770,2752' => 'Wallets', // Кошельки
  '2795,2803' => 'Belts' // Ремни...
]);

// Поле ноды-товара, содержащее значение терминов словаря-каталога.
define('GF_CUSTOM_CATALOG_NODE_FIELD', 'field_catalog');


/**
 * Implements hook_menu().
 */
function gf_custom_menu() {

  $items = array();

  $items['user/%user/reorder/%'] = array(
    'title'           => 'Re-Order Button callback',
    'page callback'   => '_gf_custom_uc_reorder',
    'page arguments'  => [1, 3],
    'access arguments' => ['create orders'],
    'type'            => MENU_CALLBACK,
    'file'            => 'gf_custom.uc_reorder.inc'
  );

  $items['gf/addtocart/%node'] = array(
    'title'           => 'Add item to your cart',
    'page callback'   => 'gf_custom_addtocart',
    'page arguments'  => [2, 3],
    'access arguments' => ['create orders'],
    'type'            => MENU_CALLBACK,
    'file'            => 'gf_custom.pages.inc'
  );

  return $items;
}


/**
 * Implements hook_uc_addresses_address_fields_alter()
 *
 * Обрабатываем поля доставки транспортной компанией,
 * доступные при оформлении заказа.
 *
 */
function gf_custom_uc_addresses_address_field_alter(&$element) {
  // Обработка поля ввода своей трасп-й комп-и.
  if (isset($element[GF_CUSTOM_OWN_CARGO_FIELD])) {
    // Заголовок поля не нужен.
    $element[GF_CUSTOM_OWN_CARGO_FIELD]['#title'] = '';
    $condition = array(
      '#edit-panes-delivery-address-delivery-ucxf-cargo-company' => array(
        'value' => GF_CUSTOM_OWN_CARGO_VISIBLE_VAL
      ),
    );
    // Появлятся это полу будет только если покупатель выбрал
    // доставку своей ТК в соответствующем поле.
    $element[GF_CUSTOM_OWN_CARGO_FIELD]['#states'] = array(
      'visible' => $condition,
      'required' => $condition,
    );
  }
}

/**
 * Implements hook_uc_add_to_cart()
 */
function gf_custom_uc_add_to_cart($nid, $qty, $data) {
  $result = [];
  if (!user_access('create orders')) {
    // Запрещаем пользователям с отсутствием прав на создание заказов
    // добавлять товары в карзину.
    $result[] = array(
      'success' => FALSE,
      'message' => t('Sorry, you cannot create orders.'),
    );
  }

  return $result;
}

/**
 * Implements hook_uc_checkout_start()
 */
function gf_custom_uc_cart_checkout_start($order) {
  $account = user_load($order->uid);
  // Запрещаем пользователям с отсутствием прав на создание заказов эти
  // заказы создавать.
  if (!user_access('create orders', $account)) {
    drupal_set_message(t('Sorry, you cannot create orders.', 'error'));
    drupal_goto('cart');
  }
}


/**
 * Implements hook_form_FORM_ID_alter()
 *
 */
function gf_custom_form_user_register_form_alter(&$form, &$form_state) {
  global $language;
  $prefix = strtoupper($language->prefix);
  $country_options = &$form['field_country_name'][LANGUAGE_NONE]['#options'];
  $lang_pref_options = &$form['field_language_pref'][LANGUAGE_NONE]['#options'];
  if (isset($country_options[$prefix])) {
    $options = [];
    $options[$prefix] = $country_options[$prefix]; // текущий регион в самом вверху.
    // В списке выбора стран ставим Россию, Италию и Китай в начало списка.
    foreach (['RU', 'IT', 'CN'] as $key) {
      if ($key != $prefix) $options[$key] = $country_options[$key];
      unset($country_options[$key]);
    }
    $country_options = $options + $country_options;
    // В форме регистрации выбираем значение по-умолчанию для  поля "Страна" в
    // зависимости от языка пользователя.
    $form['field_country_name'][LANGUAGE_NONE]['#default_value'] = $prefix;
  }
  if (isset($lang_pref_options[$language->prefix])) {
    $form['field_language_pref'][LANGUAGE_NONE]['#default_value'] = $language->prefix;
  }

  // Подключаем к форме скрипт отправки данных на Roistat.
  // $form['#attached']['js'][] = drupal_get_path('module', 'gf_custom') . '/js/roistat.js';
  drupal_add_js(drupal_get_path('module', 'gf_custom') . '/js/roistat.js');
}

/**
 * Implements hook_preprocess_node()
 */
function gf_custom_preprocess_node(&$variables) {
  $node = $variables['node'];

  if (uc_product_is_product($node)) {
    $variables['gf_addtocart_link'] = gf_custom_addtocart_link($node);
  }
  if ($node->nid == 96965) {
    $path = drupal_get_path('module', 'gf_custom');
    // Подключаем скрипт передачи данных в Roistat на
    // странице invite.
    drupal_add_js($path . '/js/roistat.js');
    // Подключаем скрипт для извратов над страницей invite.
    drupal_add_js($path . '/js/gf_custom_invite.js');
  }
}

/**
 * Implements hook_preprocess_page()
 */
function gf_custom_preprocess_page(&$vars) {
  global $language;
  if (isset($vars['node']->model) && !empty($vars['node']->model) 
    && $language->language != 'ru') {
    // На страницe продукта указываем в качестве заголовка - артикул 
    // продукта для всех языков кроме русского. (Задача № 37894)
    drupal_set_title($vars['node']->model);
  }
  // Счетчик товаров в корзине(отдельных позиций, не количество).
  $vars['uc_cart_items_counter'] = count(uc_cart_get_contents());
  // Счетчик общего количества единиц товаров в корзине.
  $vars['uc_cart_qty_counter'] = uc_cart_get_total_qty();
}

/**
 * Implements hook_preprocess_views_view()
 */
// function gf_custom_preprocess_views_view(&$vars) {
//   // На странице новинок показываем анонимному поль-лю фейковый пейджер.
//   if (user_is_anonymous() &&
//     $vars['view']->name == 'products' && $vars['display_id'] == 'novelty') {
//     $pager_string = '<hr>
//       [button class="btn btn-sm btn-primary" link = "#"]1[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]2[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]3[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]4[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]→[/button]';
//     $vars['pager'] = check_markup($pager_string, 'dynamic_shortcodes');
//   }
// }


/**
 * Implements hook_uc_cart_pane_alter().
 */
function gf_custom_uc_cart_pane_alter(&$panes, $items) {
  // Добавляем строку с информацией об общем кол-ве заказанного под строку с
  // общей стоимостью.
  $total_price_index = count(uc_cart_get_contents());
  $total_price_value = $panes['cart_form']['body']['items'][$total_price_index]['total']['#prefix'];
  $total_qty_string = '<div id="total-qty"><span>' . t('Total qty:') . '</span>' . uc_cart_get_total_qty() . '</div>';
  $panes['cart_form']['body']['items'][$total_price_index]['total']['#suffix'] .= $total_qty_string;
}

/**
 * Ссылка добавления в корзину для ноды-продукта.
 *
 */
function gf_custom_addtocart_link($node) {
  if (uc_product_is_product($node)) {
    $link = [
      '#theme' => 'link',
      '#text' => t('Add to cart'),
      '#path' => 'gf/addtocart/' . $node->nid . '/nojs/',
      '#options' => [
        // 'query' => drupal_get_destination(),
        'html' => FALSE,
        'attributes' => [
          'class' => ['use-ajax', 'btn-primary', 'btn'],
          'role' => 'button',
          'title' => t('Add item "@product" to your cart',
          ['@product'=>$node->title]),
        ]
      ],
      '#prefix' => '<div class="add-to-cart-link">',
      '#suffix' => '</div>',
      '#ajax' => [
        'effect' => 'fade',
      ],
    ];
    return render($link);
  }

  return '';
}

/**
 * Implements hook_views_pre_reder().
 */
function gf_custom_views_pre_render(&$view)  {
  $args = $view->args[0] ?? FALSE;
  // Изменяем заголовки для страниц, где арументом являются несколько
  // терминов таксономии.
  if ($view->name == 'products'
    && $args && isset(GF_CUSTOM_VIEWS_PAGE_TITLE[$args])) {
    $view->set_title(t(GF_CUSTOM_VIEWS_PAGE_TITLE[$args]));
  }
}


/**
 * Функция объявлена временно. Перенесена из "старого" шаблона для правильной работы
 * с модулями, идущими вместе со старым шабом.
 * После избавления от этих модулей фунцию можно удалить.
 */
function _get_node_field($node, $field, $lang = 'en') {
  global $language;
  $var = FALSE;
  if(isset($node->{$field}[$lang]) && !empty($node->{$field}[$lang])) {
    $var = $node->{$field}[$lang];
  } elseif(isset($node->{$field}[$language->language]) && !empty($node->{$field}[$language->language])) {
    $var = $node->{$field}[$language->language];
  } elseif(isset($node->{$field}['und']) && !empty($node->{$field}['und'])) {
    $var = $node->{$field}['und'];
  } elseif(isset($node->{$field}) && !empty($node->{$field})) {
    $var = $node->{$field};
  }
  return $var;
}


/**
 * Implements hook_node_view().
 */
function gf_custom_node_view($node, $view_mode) {
  static $parents = array();
  global $language;

  if ($view_mode == 'full' && (uc_product_is_product($node->type) || $node->type == 'page')) {
    $crumbs = array();
    if (variable_get('site_frontpage', 'node') != 'catalog') {
      $crumbs[] = l(t('Home'), '');
    }
    // Поправляем крошки на странице продукта согласно
    // иерархии терминов в словаре-каталоге.
    if (isset($node->{GF_CUSTOM_CATALOG_NODE_FIELD})) {

      if ($terms = field_get_items('node', $node, GF_CUSTOM_CATALOG_NODE_FIELD)) {
        $crumbs[] = l(t('Catalog'), 'taxonomy/term/all');
        $used_tids = array();

        foreach ($terms as $term) {
          if (!isset($parents[$term['tid']])) {
            $parents[$term['tid']] = taxonomy_get_parents_all($term['tid']);
          }

          foreach (array_reverse($parents[$term['tid']]) as $parent) {
            if (!in_array($parent->tid, $used_tids)) {
              $name = gf_custom_get_term_i18n_for_current_lang($parent->tid, $parent->name);
              $crumbs[] = l($name, 'taxonomy/term/' . $parent->tid, ['html'=>TRUE]);
              $used_tids[] = $parent->tid;
            }
          }
        }
      }
    }

    $crumbs[] = $node->title;

    drupal_set_breadcrumb($crumbs);
  }
}


/**
 * Хелпер для получения перевода термина таксономи для текущего языка(если он
 * отличен от русского и перевод имеется.)
 */
function gf_custom_get_term_i18n_for_current_lang($tid, $name) {
  global $language;

  if ($language->language != 'ru' && function_exists('i18n_string')) {
    $name = i18n_string(['taxonomy', 'term', $tid, 'name'], $name, ['langcode' => $language->language]);
  }
  return $name;
}


/**
 * Implements hook_form_alter().
 */
function gf_custom_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'search_form') {
    unset($form['basic']['keys']['#title'], $form['#attributes']);
    $form['basic']['keys']['#prefix'] = '<div class = "row"><div class = "col-md-4 col-md-offset-4"><div class = "input-group">';
    $form['basic']['keys']['#attributes']['placeholder'] = t('Search here...');
    $form['basic']['keys']['#attributes']['class'] = array('form-control');
    $form['basic']['submit']['#attributes']['class'] = array('btn btn-primary btn-icon');
    $form['basic']['submit']['#value'] = decode_entities('&#xf002;');
    $form['basic']['submit']['#prefix'] = '<div class = "input-group-btn">';
    $form['basic']['submit']['#suffix'] = '</div></div></div></div>';
  }
  if($form_id == 'search_block_form') {
    $form['search_block_form']['#prefix'] = '<div class = "input-group">';
    $form['search_block_form']['#attributes']['placeholder'] = t('Search here...');
    $form['search_block_form']['#attributes']['class'] = array('form-control');
    $form['actions']['submit']['#attributes']['class'] = array('btn btn-primary btn-icon');
    $form['actions']['submit']['#value'] = decode_entities('&#xf002;');
    $form['actions']['submit']['#suffix'] = '</div>';
  }
  if($form['#id'] == 'comment-form') {
    $form['author']['#prefix'] = '<div class = "row"><div class = "col-md-6">';
    $form['comment_body']['#prefix'] = '</div></div>';
    $form['actions']['submit']['#attributes']['class'] = array('btn-primary');
    $form['actions']['submit']['#value'] = t('Send Comment');
  }
  if($form_id == 'contact_site_form') {
    $form['#prefix'] = '<h2>' . t('Contact Form') . '</h2>';
    $form['name']['#prefix'] = '<div class = "row"><div class = "col-md-4">';
    $form['mail']['#prefix'] = '</div><div class = "col-md-4">';
    $form['subject']['#prefix'] = '</div><div class = "col-md-4">';
    $form['message']['#prefix'] = '</div></div>';
    $form['#suffix'] = '<hr class="visible-sm visible-xs lg">';
  }
  if($form_id == 'uc_cart_view_form') {
    $items_count = count(array_filter($form['items'], '_stability_cms_count_cart_items'));
    $form['items']['#prefix'] = '<div class = "box">';
    $form['items']['#weight'] = -10;
    $form['items']['#prefix'] .= '<h3>' . t('You have @num item' . ($items_count == 1 ? '' : 's') . ' in your cart', array('@num' => $items_count)) . '</h3>';
    $form['items']['#columns']['remove']['weight'] = 6;
    $form['items']['#columns']['remove']['cell'] = '';
    $form['items']['#columns']['total']['weight'] = 5;
    $form['items']['#columns']['qty']['weight'] = 4;
    $form['items']['#columns']['qty']['cell'] = t('Quantity');
    $form['items']['#columns']['desc']['cell'] = t('Product');
    $form['items']['#columns']['price'] = array(
      'cell' => t('Price'),
      'weight' => 3
    );
    $form['items']['#columns']['image'] = array(
      'cell' => '',
      'weight' => -1,
    );
    $form['update'] = $form['actions']['update'];
    $form['update']['#weight'] = -5;
    $form['update']['#prefix'] = '<div class = "text-right">';
    $form['update']['#suffix'] = '</div></div><div class="spacer lg"></div>';
    if(isset($form['actions']['continue_shopping'])) {
      $form['continue_shopping'] = $form['actions']['continue_shopping'];
      $form['continue_shopping']['#weight'] = -6;
    }
    $form['actions']['checkout']['checkout']['#value'] = t('Proceed to Checkout') . ' →';
    $form['actions']['checkout']['checkout']['#attributes']['class'] = array('btn-primary', 'btn', 'btn-lg');
    unset($form['actions']['continue_shopping'], $form['actions']['update']);
  }
  if($form_id == 'uc_cart_checkout_form') {
    if (isset($form['panes']['delivery']['next'])) {
      // Убираем кнопку "Далее" из блока информации о доставке(если она
      // там есть).
      unset($form['panes']['delivery']['next']);
    }
    foreach ($form['panes'] as $key => $pane) {
      if (is_array($pane) && isset($pane['next'])) {
        $form['panes'][$key]['next']['#attributes']['class'] = array('btn-primary');
      }
    }
    $form['actions']['continue']['#attributes']['class'] = array('btn-primary', 'btn-lg');
  }
  if(in_array($form_id, array('user_login', 'user_register_form', 'user_pass'))) {
    $form['#prefix'] = '<div class = "box">';
    $form['#suffix'] = '</div>';
  }
  if($form_id == 'blog_node_form') {
    $form['field_video_iframe']['#states'] = array(
      'visible' => array(
        '.field-name-field-blog-type select' => array('value' => 'Video'),
      )
    );
    $form['field_images']['#states'] = array(
      'visible' => array(
        '.field-name-field-blog-type select, .a' => array('!value' => 'Video'),
        '.field-name-field-blog-type select, .ab' => array('!value' => 'Link'),
        '.field-name-field-blog-type select, .abc' => array('!value' => 'Quote'),
        '.field-name-field-blog-type select, .abd' => array('!value' => 'Audio'),
        '.field-name-field-blog-type select, .abe' => array('!value' => 'Audio iFrame'),
      )
    );
    $form['body']['#states'] = array(
      'visible' => array(
        '.field-name-field-blog-type select, .a' => array('!value' => 'Video'),
        '.field-name-field-blog-type select, .ab' => array('!value' => 'Image'),
        '.field-name-field-blog-type select, .abc' => array('!value' => 'Gallery'),
        '.field-name-field-blog-type select, .abd' => array('!value' => 'Audio'),
        '.field-name-field-blog-type select, .abe' => array('!value' => 'Audio iFrame'),
      )
    );
    $form['field_audio']['#states'] = array(
      'visible' => array(
        '.field-name-field-blog-type select' => array('value' => 'Audio'),
      )
    );
    $form['field_audio_iframe']['#states'] = array(
      'visible' => array(
        '.field-name-field-blog-type select' => array('value' => 'Audio iFrame'),
      )
    );
  }
  if($form_id == 'tb_megamenu_configure_form') {
    drupal_add_css(drupal_get_path('theme', 'stability') . '/css/fonts/font-awesome/css/font-awesome.css');
  }
}


/**
 * Implements hook_tapir_table_alter().
 */
function gf_custom_tapir_table_alter(&$table, $table_id) {
  if ($table_id == 'uc_cart_view_table') {
    foreach (element_children($table) as $key) {
      if (!empty($table['#parameters'][1][$key]['nid'])) {
        $node = node_load($table['#parameters'][1][$key]['nid']['#value']);

        $region = gf_stock_get_current_region();
        $price = (int) $node->gf_region_prices[$region];

        // Отображаем цену для текущего региона.
        $table[$key]['price'] = array(
          '#markup' => theme('uc_product_price',array('element' => array('#value' => $price))),
        );
        $image = _get_node_field($node, 'uc_product_image');
        $table[$key]['image'] = array(
          '#markup' => isset($image['0']['uri']) ? theme('image_style', array('style_name' => 'blog_60x60', 'path' => $image[0]['uri'])) : '',
        );
        $table[$key]['remove']['#value'] = decode_entities('&#xf00d;');
        $table[$key]['qty']['#attributes']['class'] = array('qty', 'text', 'input-text');
        $table[$key]['qty']['#prefix'] = '<div class="quantity"><input type="button" value="-" class="minus">';
        $table[$key]['qty']['#suffix'] = '<input type="button" value="+" class="plus"></div>';
      }
    }
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function gf_custom_preprocess_uc_price(&$variables) {
  // Добавляем название валюты(после суммы) в зависимости от
  // текущего региона.
  $region = gf_stock_get_current_region();
  $variables['suffixes'][] = GF_STOCK_CURRENCY_SYGN[$region];
}

/**
 * Implements hook_language_negotiation_info_alter().
 *
 * Remove the 'cache' setting from LOCALE_LANGUAGE_NEGOTIATION_BROWSER since
 * the code that utilizes this setting will in fact prevent browser negotiation.
 */
function gf_custom_language_negotiation_info_alter(&$negotiation_info) {
    unset($negotiation_info[LOCALE_LANGUAGE_NEGOTIATION_BROWSER]['cache']);
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function gf_custom_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  global $language;
  if ($language->language != 'ru' && isset($form['field_material_tid_selective'])) {
    # Хак для исправления ошибки модуля Views Selective Filters, который
    # не возвращает перевод термина для текущего языка.
    $options = $form['field_material_tid_selective']['#options'];
    if (count($options) > 1) {
      foreach($options as $tid=>$name) {
        if ($tid == 'All') continue;
        $output = gf_custom_get_term_i18n_for_current_lang($tid, $string);
        $form['field_material_tid_selective']['#options'][$tid] = $output;
      }
    }
  }
  # Хак для получения перевода для значения кнопки сброса фильтров.
  if (isset($form['reset']['#value'])) {
    $form['reset']['#value'] = t($form['reset']['#value']);
  }
}

