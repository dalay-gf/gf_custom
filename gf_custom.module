<?php

// Имя поля ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_FIELD', 'ucxf_own_transport_company');
// HTML-элемент поля выбора ТК, при выборе которого будет видимым поле 
// ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_VISIBLE_JQ_ELEMENT', '#edit-panes-delivery-address-delivery-ucxf-cargo-company');
// Имя элемента списка выбора ТК, при выборе которого будет видимым поле 
// ввода своей ТК.
define('GF_CUSTOM_OWN_CARGO_VISIBLE_VAL', 'own_cargo');

// Заголовки для страниц, объединяющих несколько терминов таксономии 
// и сформированных через Views.
define('GF_CUSTOM_VIEWS_PAGE_TITLE', [
  '2756,2764'=> 'Bags', // Сумки (муж., женские...)
  '2769,2771,2770,2752' => 'Wallets', // Кошельки 
  '2795,2803' => 'Belts' // Ремни...
]);



/**
 * Implements hook_menu().
 */
function gf_custom_menu() {

  $items = array();

    $items['user/%user/reorder/%'] = array(
      'title'           => 'Re-Order Button callback',
      'page callback'   => '_gf_custom_uc_reorder',
      'page arguments'  => [1, 3],
      'access arguments' => ['create orders'],
      'type'            => MENU_CALLBACK,
      'file'            => 'gf_custom.uc_reorder.inc'
    );

    $items['gf/addtocart/%node'] = array(
      'title'           => 'Add item to your cart',
      'page callback'   => 'gf_custom_addtocart',
      'page arguments'  => [2, 3],
      'access arguments' => ['create orders'],
      'type'            => MENU_CALLBACK,
      'file'            => 'gf_custom.pages.inc'
    );

  return $items;
}


/**
 * Implements hook_uc_addresses_address_fields_alter()
 *
 * Обрабатываем поля доставки транспортной компанией,
 * доступные при оформлении заказа.
 *
 */
function gf_custom_uc_addresses_address_field_alter(&$element) {
  // Обработка поля ввода своей трасп-й комп-и.
  if (isset($element[GF_CUSTOM_OWN_CARGO_FIELD])) {
    // Заголовок поля не нужен.
    $element[GF_CUSTOM_OWN_CARGO_FIELD]['#title'] = '';
    $condition = array(
      '#edit-panes-delivery-address-delivery-ucxf-cargo-company' => array(
        'value' => GF_CUSTOM_OWN_CARGO_VISIBLE_VAL
      ),
    );
    // Появлятся это полу будет только если покупатель выбрал
    // доставку своей ТК в соответствующем поле.
    $element[GF_CUSTOM_OWN_CARGO_FIELD]['#states'] = array(
            'visible' => $condition,
            'required' => $condition,
        );
  }
}

/**
 * Implements hook_uc_add_to_cart()
 */
function gf_custom_uc_add_to_cart($nid, $qty, $data) {
  $result = [];
  if (!user_access('create orders')) {
    // Запрещаем пользователям с отсутствием прав на создание заказов
    // добавлять товары в карзину.
    $result[] = array(
      'success' => FALSE,
      'message' => t('Sorry, you cannot create orders.'),
    );
  }

  return $result;
}

/**
 * Implements hook_uc_checkout_start()
 */
function gf_custom_uc_cart_checkout_start($order) {
  $account = user_load($order->uid);
  // Запрещаем пользователям с отсутствием прав на создание заказов эти
  // заказы создавать.
  if (!user_access('create orders', $account)) {
    drupal_set_message(t('Sorry, you cannot create orders.', 'error'));
    drupal_goto('cart');
  }
}


/**
 * Implements hook_form_FORM_ID_alter()
 *
 */
function gf_custom_form_user_register_form_alter(&$form, &$form_state) {
  global $language;
  $prefix = strtoupper($language->prefix);
  $country_options = &$form['field_country_name'][LANGUAGE_NONE]['#options'];
  $lang_pref_options = &$form['field_language_pref'][LANGUAGE_NONE]['#options'];
  if (isset($country_options[$prefix])) {
    $options = [];
    $options[$prefix] = $country_options[$prefix]; // текущий регион в самом вверху.
    // В списке выбора стран ставим Россию, Италию и Китай в начало списка.
    foreach (['RU', 'IT', 'CN'] as $key) {
      if ($key != $prefix) $options[$key] = $country_options[$key];
      unset($country_options[$key]);
    }
    $country_options = $options + $country_options;
    // В форме регистрации выбираем значение по-умолчанию для  поля "Страна" в
    // зависимости от языка пользователя.
    $form['field_country_name'][LANGUAGE_NONE]['#default_value'] = $prefix;
  }
  if (isset($lang_pref_options[$language->prefix])) {
    $form['field_language_pref'][LANGUAGE_NONE]['#default_value'] = $language->prefix;
  }

  // Подключаем к форме скрипт отправки данных на Roistat.
  // $form['#attached']['js'][] = drupal_get_path('module', 'gf_custom') . '/js/roistat.js';
  drupal_add_js(drupal_get_path('module', 'gf_custom') . '/js/roistat.js');
}

/**
 * Implements hook_preprocess_node()
 */
function gf_custom_preprocess_node(&$variables) {
  $node = $variables['node'];
  if (uc_product_is_product($node)) {
    $variables['gf_addtocart_link'] = gf_custom_addtocart_link($node);
  }
  if ($node->nid == 96965) {
    $path = drupal_get_path('module', 'gf_custom');
    // Подключаем скрипт передачи данных в Roistat на 
    // странице invite.
    drupal_add_js($path . '/js/roistat.js');
    // Подключаем скрипт для извратов над страницей invite.
    drupal_add_js($path . '/js/gf_custom_invite.js');
  }
}

/**
 * Implements hook_preprocess_page()
 */
function gf_custom_preprocess_page(&$vars) {
  // Счетчик товаров в корзине(отдельных позиций, не количество).
  $vars['uc_cart_items_counter'] = count(uc_cart_get_contents());
  // Счетчик общего количества единиц товаров в корзине.
  $vars['uc_cart_qty_counter'] = uc_cart_get_total_qty();
}


/**
 * Implements hook_preprocess_views_view()
 */
function gf_custom_preprocess_views_view(&$vars) {
  // На странице новинок показываем анонимному поль-лю фейковый пейджер.
  if (user_is_anonymous() && 
    $vars['view']->name == 'products' && $vars['display_id'] == 'novelty') {
    $pager_string = '<hr>
[button class="btn btn-sm btn-primary" link = "#"]1[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]2[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]3[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]4[/button]&nbsp;[button class="btn btn-sm btn-default" link = "/user/register"]→[/button]';
    $vars['pager'] = check_markup($pager_string, 'dynamic_shortcodes');
  }
}


/**
 * Implements hook_uc_cart_pane_alter().
 */
function gf_custom_uc_cart_pane_alter(&$panes, $items) {
  // Добавляем строку с информацией об общем кол-ве заказанного под строку с
  // общей стоимостью.
  $total_price_index = count(uc_cart_get_contents());
  $total_price_value = $panes['cart_form']['body']['items'][$total_price_index]['total']['#prefix'];
  $total_qty_string = '<div id="total-qty"><span>' . t('Total qty:') . '</span>' . uc_cart_get_total_qty() . '</div>';
  $panes['cart_form']['body']['items'][$total_price_index]['total']['#suffix'] .= $total_qty_string;
}

/**
 * Ссылка добавления в корзину для ноды-продукта.
 *
 */
function gf_custom_addtocart_link($node) {
  if (uc_product_is_product($node)) {
    $link = [
      '#theme' => 'link',
      '#text' => t('Add to cart'),
      '#path' => 'gf/addtocart/' . $node->nid . '/nojs/',
      '#options' => [
        // 'query' => drupal_get_destination(),
        'attributes' => [
          'class' => ['use-ajax', 'btn-primary', 'btn'],
          'role' => 'button',
          'title' => t('Add item "@product" to your cart', 
          ['@product'=>$node->title]),
        ]
      ],
      '#prefix' => '<div class="add-to-cart-link">',
      '#suffix' => '</div>',
      '#ajax' => [
        'effect' => 'fade',
      ],
    ]; 
    return render($link);
  }

  return '';
}

/**
 * Implements hook_views_pre_reder().
 */
function gf_custom_views_pre_render(&$view)  {
  $args = $view->args[0] ?? FALSE;
  // Изменяем заголовки для страниц, где арументом являются несколько
  // терминов таксономии.
  if ($view->name == 'products' 
    && $args && isset(GF_CUSTOM_VIEWS_PAGE_TITLE[$args])) {
    $view->set_title(t(GF_CUSTOM_VIEWS_PAGE_TITLE[$args]));
  }
}
